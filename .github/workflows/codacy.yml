# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow checks out code, performs a Codacy security scan
# and integrates the results with the
# GitHub Advanced Security code scanning feature.  For more information on
# the Codacy security scan action usage and parameters, see
# https://github.com/codacy/codacy-analysis-cli-action.
# For more information on Codacy Analysis CLI in general, see
# https://github.com/codacy/codacy-analysis-cli.

name: Codacy Security Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '26 7 * * 0'

permissions:
  contents: read

jobs:
  codacy-security-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v4

      # Clean any potential uncommitted changes to avoid Codacy warnings
      - name: Clean repository
        run: |
          git clean -fd
          git reset --hard HEAD
          git status

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        id: codacy-analysis
        uses: codacy/codacy-analysis-cli-action@master
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647
          # Additional options for static website analysis
          tool: eslint,csslint
        continue-on-error: true
        
      # Validate and fix SARIF file
      - name: Validate and fix SARIF file
        run: |
          echo "🔍 Checking SARIF file integrity..."
          
          # Check if SARIF file exists and has content
          if [[ ! -f "results.sarif" ]]; then
            echo "❌ SARIF file does not exist, creating minimal SARIF..."
            CREATE_FALLBACK=true
          elif [[ ! -s "results.sarif" ]]; then
            echo "❌ SARIF file is empty, creating minimal SARIF..."
            CREATE_FALLBACK=true
          else
            # Validate JSON syntax
            if ! python3 -m json.tool results.sarif > /dev/null 2>&1; then
              echo "❌ SARIF file has invalid JSON syntax, creating minimal SARIF..."
              CREATE_FALLBACK=true
            else
              echo "✅ SARIF file is valid"
              CREATE_FALLBACK=false
            fi
          fi
          
          # Create fallback SARIF if needed
          if [[ "$CREATE_FALLBACK" == "true" ]]; then
            echo "🔧 Creating fallback SARIF file..."
            cat > results.sarif << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Codacy Analysis CLI",
                    "version": "1.0.0",
                    "informationUri": "https://docs.codacy.com/"
                  }
                },
                "results": [],
                "columnKind": "utf16CodeUnits"
              }
            ]
          }
          EOF
            echo "✅ Fallback SARIF created successfully"
          fi
          
          # Final validation
          echo "🔍 Final SARIF validation..."
          if python3 -m json.tool results.sarif > /dev/null 2>&1; then
            echo "✅ SARIF file is valid and ready for upload"
            echo "📋 SARIF file info:"
            ls -la results.sarif
            echo "📄 SARIF file preview (first 500 chars):"
            head -c 500 results.sarif
            echo ""
          else
            echo "❌ SARIF file is still invalid after fallback creation"
            echo "📄 SARIF file contents:"
            cat results.sarif
            exit 1
          fi

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
        if: always() && hashFiles('results.sarif') != ''
