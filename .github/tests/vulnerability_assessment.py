#!/usr/bin/env python3
"""
Advanced Vulnerability Assessment
Additional security testing beyond basic file access control
"""

import requests
import sys
import json
import time
from urllib.parse import urljoin
import re

def test_security_headers(base_url):
    """Test for important security headers"""
    print("🛡️ TESTING SECURITY HEADERS:")
    print("-" * 40)
    
    try:
        response = requests.get(base_url, timeout=10)
        headers = response.headers
        
        security_headers = {
            'X-Frame-Options': {'present': 'X-Frame-Options' in headers, 'critical': True},
            'X-Content-Type-Options': {'present': 'X-Content-Type-Options' in headers, 'critical': True},
            'X-XSS-Protection': {'present': 'X-XSS-Protection' in headers, 'critical': False},
            'Strict-Transport-Security': {'present': 'Strict-Transport-Security' in headers, 'critical': True},
            'Content-Security-Policy': {'present': 'Content-Security-Policy' in headers, 'critical': False},
            'Referrer-Policy': {'present': 'Referrer-Policy' in headers, 'critical': False},
            'Permissions-Policy': {'present': 'Permissions-Policy' in headers, 'critical': False}
        }
        
        total_headers = len(security_headers)
        present_headers = sum(1 for h in security_headers.values() if h['present'])
        critical_present = sum(1 for h in security_headers.values() if h['critical'] and h['present'])
        critical_total = sum(1 for h in security_headers.values() if h['critical'])
        
        for header, info in security_headers.items():
            status = "✅" if info['present'] else "❌"
            critical_marker = " [CRITICAL]" if info['critical'] else ""
            value = headers.get(header, "Not Set")[:50] if info['present'] else "Not Set"
            print(f"  {status} {header}: {value}{critical_marker}")
        
        print(f"\n📊 SECURITY HEADERS SUMMARY:")
        print(f"   📋 Total Headers: {present_headers}/{total_headers} ({(present_headers/total_headers)*100:.1f}%)")
        print(f"   🚨 Critical Headers: {critical_present}/{critical_total} ({(critical_present/critical_total)*100:.1f}%)")
        
        return {"total": total_headers, "present": present_headers, "critical_present": critical_present, "critical_total": critical_total}
        
    except Exception as e:
        print(f"❌ Error testing security headers: {e}")
        return {"total": 0, "present": 0, "critical_present": 0, "critical_total": 0}

def test_ssl_configuration(base_url):
    """Test SSL/TLS configuration"""
    print("\n🔒 TESTING SSL/TLS CONFIGURATION:")
    print("-" * 40)
    
    try:
        # Test HTTPS enforcement
        http_url = base_url.replace('https://', 'http://')
        response = requests.get(http_url, timeout=10, allow_redirects=False)
        
        https_redirect = response.status_code in [301, 302, 307, 308]
        print(f"  {'✅' if https_redirect else '❌'} HTTP to HTTPS Redirect: {'Yes' if https_redirect else 'No'}")
        
        # Test HTTPS connection
        https_response = requests.get(base_url, timeout=10)
        https_working = https_response.status_code == 200
        print(f"  {'✅' if https_working else '❌'} HTTPS Connection: {'Working' if https_working else 'Failed'}")
        
        # Check certificate (basic)
        print(f"  ✅ SSL Certificate: Valid (assumed for GitHub Pages)")
        
        return {"https_redirect": https_redirect, "https_working": https_working, "cert_valid": True}
        
    except Exception as e:
        print(f"❌ Error testing SSL configuration: {e}")
        return {"https_redirect": False, "https_working": False, "cert_valid": False}

def test_information_disclosure(base_url):
    """Test for information disclosure vulnerabilities"""
    print("\n🔍 TESTING INFORMATION DISCLOSURE:")
    print("-" * 40)
    
    disclosure_tests = [
        # Server information
        {"path": "", "pattern": r"Server:\s*(.+)", "name": "Server Header", "critical": False},
        {"path": "", "pattern": r"X-Powered-By:\s*(.+)", "name": "X-Powered-By Header", "critical": True},
        
        # Common sensitive files (beyond what we already test)
        {"path": ".env.example", "status_test": True, "name": ".env.example", "critical": False},
        {"path": "config.json", "status_test": True, "name": "config.json", "critical": True},
        {"path": "wp-config.php", "status_test": True, "name": "wp-config.php", "critical": False},
        {"path": "database.yml", "status_test": True, "name": "database.yml", "critical": True},
        {"path": ".git/config", "status_test": True, "name": ".git/config", "critical": True},
        {"path": "backup.sql", "status_test": True, "name": "backup.sql", "critical": True},
    ]
    
    issues = []
    
    for test in disclosure_tests:
        try:
            if test.get("status_test"):
                # Test file accessibility
                response = requests.get(urljoin(base_url, test["path"]), timeout=5)
                if response.status_code == 200:
                    issues.append(test)
                    critical_marker = " [CRITICAL]" if test["critical"] else ""
                    print(f"  ❌ {test['name']}: Accessible{critical_marker}")
                else:
                    print(f"  ✅ {test['name']}: Protected")
            else:
                # Test header patterns
                response = requests.get(base_url, timeout=5)
                headers_text = str(response.headers)
                match = re.search(test["pattern"], headers_text, re.IGNORECASE)
                if match:
                    issues.append(test)
                    critical_marker = " [CRITICAL]" if test["critical"] else ""
                    print(f"  ❌ {test['name']}: {match.group(1)}{critical_marker}")
                else:
                    print(f"  ✅ {test['name']}: Not disclosed")
                    
        except Exception:
            print(f"  ✅ {test['name']}: Protected (connection failed)")
        
        time.sleep(0.1)
    
    critical_issues = [i for i in issues if i["critical"]]
    
    print(f"\n📊 INFORMATION DISCLOSURE SUMMARY:")
    print(f"   📋 Total Issues: {len(issues)}")
    print(f"   🚨 Critical Issues: {len(critical_issues)}")
    
    return {"total_issues": len(issues), "critical_issues": len(critical_issues), "issues": issues}

def test_content_security(base_url):
    """Test content security features"""
    print("\n📝 TESTING CONTENT SECURITY:")
    print("-" * 40)
    
    try:
        response = requests.get(base_url, timeout=10)
        content = response.text
        headers = response.headers
        
        security_checks = []
        
        # Check for inline JavaScript (potential XSS vector)
        inline_js = len(re.findall(r'<script[^>]*>.*?</script>', content, re.DOTALL | re.IGNORECASE))
        if inline_js > 0:
            security_checks.append({"type": "Inline JavaScript", "count": inline_js, "severity": "medium"})
            print(f"  ⚠️ Inline JavaScript: {inline_js} occurrences found")
        else:
            print(f"  ✅ Inline JavaScript: None found")
        
        # Check for inline CSS (less critical but noteworthy)
        inline_css = len(re.findall(r'style\s*=\s*["\'][^"\']*["\']', content, re.IGNORECASE))
        if inline_css > 5:  # Some inline CSS is normal
            security_checks.append({"type": "Excessive Inline CSS", "count": inline_css, "severity": "low"})
            print(f"  ⚠️ Inline CSS: {inline_css} occurrences (high)")
        else:
            print(f"  ✅ Inline CSS: {inline_css} occurrences (acceptable)")
        
        # Check for external resources (mixed content potential)
        external_resources = len(re.findall(r'https?://(?!prajitdas\.github\.io)[^"\'\s]+', content))
        if external_resources > 0:
            print(f"  ℹ️ External Resources: {external_resources} found (review for mixed content)")
        else:
            print(f"  ✅ External Resources: All internal")
        
        # Check Content-Type header
        content_type = headers.get('Content-Type', '')
        if 'charset' in content_type.lower():
            print(f"  ✅ Character Encoding: Specified ({content_type})")
        else:
            security_checks.append({"type": "Missing Charset", "severity": "low"})
            print(f"  ⚠️ Character Encoding: Not specified")
        
        critical_issues = len([c for c in security_checks if c.get("severity") == "high"])
        medium_issues = len([c for c in security_checks if c.get("severity") == "medium"])
        
        print(f"\n📊 CONTENT SECURITY SUMMARY:")
        print(f"   🚨 High Risk Issues: {critical_issues}")
        print(f"   ⚠️ Medium Risk Issues: {medium_issues}")
        print(f"   📋 Total Issues: {len(security_checks)}")
        
        return {"checks": security_checks, "critical": critical_issues, "medium": medium_issues}
        
    except Exception as e:
        print(f"❌ Error testing content security: {e}")
        return {"checks": [], "critical": 0, "medium": 0}

def main():
    """Run advanced vulnerability assessment"""
    
    base_url = "https://prajitdas.github.io/"
    
    print("🛡️ ADVANCED VULNERABILITY ASSESSMENT")
    print("=" * 60)
    print(f"🎯 Target: {base_url}")
    print("🔍 Testing advanced security configurations...")
    print("=" * 60)
    
    # Run all security tests
    headers_result = test_security_headers(base_url)
    ssl_result = test_ssl_configuration(base_url)
    disclosure_result = test_information_disclosure(base_url)
    content_result = test_content_security(base_url)
    
    # Final assessment
    print("\n" + "=" * 60)
    print("📊 VULNERABILITY ASSESSMENT SUMMARY")
    print("=" * 60)
    
    total_critical_issues = (
        (headers_result["critical_total"] - headers_result["critical_present"]) +  # Missing critical headers
        disclosure_result["critical_issues"] +
        content_result["critical"]
    )
    
    total_medium_issues = content_result["medium"]
    
    # Security score calculation
    security_score = 100
    security_score -= total_critical_issues * 20  # -20 points per critical issue
    security_score -= total_medium_issues * 10    # -10 points per medium issue
    security_score -= (headers_result["critical_total"] - headers_result["critical_present"]) * 5  # Missing headers
    security_score = max(0, security_score)  # Don't go below 0
    
    print(f"🔒 Security Headers: {headers_result['critical_present']}/{headers_result['critical_total']} critical")
    print(f"🌐 SSL/TLS: {'✅ Configured' if ssl_result['https_working'] and ssl_result['https_redirect'] else '⚠️ Issues detected'}")
    print(f"📋 Information Disclosure: {disclosure_result['critical_issues']} critical issues")
    print(f"📝 Content Security: {content_result['critical']} critical, {content_result['medium']} medium issues")
    
    print(f"\n🏆 OVERALL SECURITY SCORE: {security_score}/100")
    
    if security_score >= 90:
        print("🟢 EXCELLENT - Strong security posture")
        return 0
    elif security_score >= 75:
        print("🟡 GOOD - Minor security improvements needed")
        return 0
    elif security_score >= 50:
        print("🟠 FAIR - Several security issues need attention")
        return 1
    else:
        print("🔴 POOR - Critical security vulnerabilities found")
        return 2

if __name__ == "__main__":
    sys.exit(main())